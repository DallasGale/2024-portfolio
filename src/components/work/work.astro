---
import data from "./data.json";
import CardGroup from "./cardGroup";
import SectionTitle from "@components/sectionTitle/sectionTitle.astro";
---

<section class="section" id="work">
  <SectionTitle title="Portfolio" id="work-title" />
  <div class="container">
    <div class="card-list">
      <CardGroup cards={data} client:load />
    </div>
  </div>
</section>

<style lang="scss">
  @import "../../scss/animations.scss";
  @import "../../scss/breakpoints.scss";

  .section {
    position: relative;
    grid-column: 2 / span all;
    padding-top: var(--space-10);
    max-width: 90vw;
    margin: auto;
    z-index: 3;
  }
  .container {
    display: block;
    // min-height: 100vh;
    // flex-direction: column;
    // overflow: hidden;
    // margin: auto;
    width: 100%;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: visible;
    // max-width: 588px;
    // padding-top: var(--space-7);
  }
  .title {
    top: 0;
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-bold);
    color: var(--color-title);
    position: relative;
    span {
      color: var(--color-title-stop);
    }
  }

  .bgImage {
    animation: smoke2 300s ease-in-out infinite forwards;
    transform-origin: bottom right;
    opacity: 0.4;
    position: absolute;
    bottom: 0;
    right: 0;
    height: auto;
    width: 70vw;
    max-width: 1100px;
    pointer-events: none;
    object-fit: fill;
    display: flex;
    z-index: 2;
    mix-blend-mode: lighten;
  }

  .card-list {
    z-index: 1;
    display: grid;
    grid-template-columns: repeat(2, calc(var(--grid-column) * 2.5));
    position: relative;
    padding-bottom: 1090px;
    gap: var(--space-8);
  }

  @media screen and (min-width: $breakpoint-xl) {
    .section {
      position: relative;
      grid-column: 1 / span all;
    }
  }
</style>

<script type="module">
  function workParallax() {
    document.querySelectorAll(".parallax-scroll").forEach((item) => {
      if (item.dataset.direction === "verticle") {
        const pos = window.scrollY * item.dataset.rate;
        item.style.transform = `translateY(${pos}px)`;
      }
    });
  }

  document.addEventListener("scroll", () => {
    workParallax();
  });

  const target2 = document.getElementById("work");
  const title2 = document.getElementById("work-title");

  const options2 = {
    root: null,
    rootMargin: "0px",
    threshold: 0.2,
  };

  const cb2 = (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        console.log("Work section is visible");
        title2.classList.add("visible");
      } else {
        console.log("Work section is not visible");
        title2.classList.remove("visible");
      }
    });
  };

  const ob2 = new IntersectionObserver(cb2, options2);
  ob2.observe(target2);
</script>
