---
import "@fontsource/poppins/300.css";
import "@fontsource/poppins/400.css";
import "@fontsource/poppins/600.css";
import "@fontsource/poppins/700.css";

import "antd/dist/reset.css";

import Header from "../components/header/header.astro";
import Sidebar from "../components/sidebar/sidebar.astro";
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <Sidebar />
    <slot />
  </body>
</html>

<style is:global>
  :root {
    --font-weight-bold: 700;
    --font-weight-semibold: 600;
    --font-weight-regular: 400;
    --font-weight-light: 300;
    --font-size-md: 60px;
    --font-size-lg: 80px;
    --font-size-xl: 100px;
    --font-size-xxl: 180px;

    --space-1: 2px;
    --space-2: 4px;
    --space-3: 8px;
    --space-4: 16px;
    --space-5: 32px;
    --space-6: 64px;
    --space-7: 98px;
    --space-8: 128px;
    --space-9: 200px;
    --space-10: 420px;
    --space-11: 600px;

    --font-1: 8px;
    --font-2: 10px;
    --font-3: 12px;
    --font-4: 14px;
    --font-5: 16px;
    --font-6: 18px;
    --font-7: 20px;
    --font-8: 22px;
    --font-9: 24px;
    --font-10: 26px;
    --font-11: 28px;
    --font-12: 30px;
    --font-13: 32px;
    --font-14: 34px;
    --font-15: 36px;
    --font-16: 38px;
    --font-17: 40px;
    --font-18: 42px;
    --font-19: 44px;

    --grid-gap: 20px;
    --grid-column: 200px;
    --grid-column-negative: -200px;

    --header-logo: url(../images/dallas-white.png);

    --color-nav: #fff;
    --color-accent: #aefc79;
    --color-accent-dark: #436e27;
    --color-active: #aefc79;
    --color-bg: #000;
    --color-title: #ffffff;
    --color-title-stop: #545454;
    --color-paragraph: #bababa;
    --color-paragraph-strong: #ffffff;
    --color-button: #ffffff;
    --color-button-text: #000000;
    --color-link: #ffffff;
    --color-toggle-on: #fff;
    --color-togglef: #000000;
    --color-modal-bg: #000000;
    --color-modal-content: #fff;
    --color-modal-border: #494949;

    --color-cube-instruction: #000;

    --transition-card: all 0.65s ease;
    --transition-button: all 0.25s ease;

    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );

    --breakpoint-sm: 414px;
    --breakpoint-md: 1024px;
  }

  body {
    margin: 0;
    padding: 0;
    background: var(--color-bg);
  }
  html {
    font-family: "Poppins", system-ui, sans-serif !important;
  }

  /* main {
    background: var(--color-bg);
  } */
  h1,
  h2,
  h3,
  p {
    margin: 0;
  }

  button {
    cursor: pointer;
  }

  .link {
    color: var(--color-link);
    font-weight: var(--font-weight-semibold);
  }

  .modal-text,
  .modal-text-strong {
    color: var(--color-paragraph);
    font-weight: var(--font-weight-regular);
    font-size: var(--font-4);
    font-family: "Poppins", system-ui, sans-serif !important;
  }
  .modal-text-strong {
    color: var(--color-paragraph-strong);
    font-weight: var(--font-weight-bold);
  }

  .modal-text-row {
    display: flex;
    flex-direction: row;
    gap: var(--space-3);
  }

  [data-theme="1"] {
    --color-accent: #aefc79;
    --color-toggle-on: #aefc79;
    --color-bg: #000;
  }
  [data-theme="2"] {
    --color-accent: #e7a42f;
    --color-title-stop: #ffffff;
    --color-bg: #140f08;

    --color-toggle-on: #e7a42f;
  }
  [data-theme="3"] {
    --color-accent: #a620aa;
    --color-title-stop: #ffffff;
    --color-bg: #1d172b;
    --color-cube-instruction: #fff;
  }

  [data-theme="4"] {
    --color-accent: #e43737;
    --color-title: #000;
    --color-title-stop: #000;
    --color-bg: #fff;
    --color-nav: #000;
    --color-paragraph: #000;
    --color-paragraph-strong: #000;
    --color-button: #e43737;
    --color-button-text: #fff;
    --color-link: #e43737;
    --color-toggle-on: #e43737;
    --color-cube-instruction: #fff;

    --header-logo: url(../images/dallas-black.png);
  }

  [data-theme="5"] {
    --color-accent: #5c9dbd;
    --color-title-stop: #ffffff;
    --color-bg: #1e4287;
    --color-cube-instruction: #fff;
  }

  [data-theme="6"] {
    --color-accent: #000000;
    --color-nav: #000;
    --color-title: #000;
    --color-title-stop: #ffffff;
    --color-bg: #83dfbc;
    --color-paragraph: #000;
    --color-paragraph-strong: #000;
    --color-toggle-on: #000;
    --color-cube-instruction: #fff;

    --header-logo: url(../images/dallas-black.png);
  }
</style>

<script lang="ts">
  document.addEventListener("DOMContentLoaded", () => {
    const aboutTarget = document.getElementById("about");
    const aboutTitle = document.getElementById("about-title");
    const workTarget = document.getElementById("work");
    const workTitle = document.getElementById("work-title");

    const options = {
      root: null,
      rootMargin: "0px",
      threshold: 0.35, // Changed to 0.1 for earlier detection
    };

    const aboutCallback = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          console.log("About section is visible");
          aboutTitle.classList.add("visible");
          workTitle.classList.remove("visible");
        } else {
          console.log("About section is not visible");
          aboutTitle.classList.remove("visible");
        }
      });
    };

    const aboutObserver = new IntersectionObserver(aboutCallback, options);
    aboutObserver.observe(aboutTarget);

    const workCallback = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          console.log("Work section is visible");
          workTitle.classList.add("visible");
          aboutTitle.classList.remove("visible");
        } else {
          console.log("Work section is not visible");
          workTitle.classList.remove("visible");
        }
      });
    };

    const workObserver = new IntersectionObserver(workCallback, options);
    workObserver.observe(workTarget);
  });
</script>
